Index: app/src/main/java/com/example/seg2105_project/Client_Registration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.seg2105_project;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.UUID;\r\n\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\npublic class Client_Registration extends AppCompatActivity implements View.OnClickListener {\r\n\r\n    Button btnRegisterClient;\r\n    Button btnBack;\r\n    EditText firstNameClient;\r\n    EditText lastNameClient;\r\n    EditText emailAddressClient;\r\n    EditText passwordClient;\r\n    EditText addressNumClient;\r\n    EditText addressNameClient;\r\n    EditText cardNumberClient;\r\n    EditText monthYearClient;\r\n    EditText cvvClient;\r\n\r\n    DatabaseReference DR;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState){\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_client_registration);\r\n\r\n        btnRegisterClient = (Button) findViewById(R.id.btnRegisterClient);\r\n        btnBack = (Button) findViewById(R.id.btnBack);\r\n        firstNameClient = (EditText) findViewById(R.id.firstNameClient);\r\n        lastNameClient = (EditText) findViewById(R.id.lastNameClient);\r\n        emailAddressClient = (EditText) findViewById(R.id.emailAddressClient);\r\n        passwordClient = (EditText) findViewById(R.id.passwordClient);\r\n        addressNumClient = (EditText) findViewById(R.id.addressNumClient);\r\n        addressNameClient = (EditText) findViewById(R.id.addressNameClient);\r\n        cardNumberClient = (EditText) findViewById(R.id.cardNumberClient);\r\n        monthYearClient = (EditText) findViewById(R.id.monthYearClient);\r\n        cvvClient = (EditText) findViewById(R.id.cvvClient);\r\n\r\n\r\n\r\n        DR = FirebaseDatabase.getInstance().getReference();\r\n\r\n        btnRegisterClient.setOnClickListener(this);\r\n        btnBack.setOnClickListener(this);\r\n    }\r\n\r\n    /**\r\n     * onClick listens for a click and proceeds to corresponding activity/method\r\n     * @param v\r\n     */\r\n    public void onClick(View v) {\r\n        switch(v.getId()) {\r\n            case R.id.btnRegisterClient:\r\n               if (checkInfo() == true) {\r\n\r\n                   try {\r\n                       writeNewUser();\r\n                   } catch (ClassNotFoundException e) {\r\n                       e.printStackTrace();\r\n                   } catch (IOException e) {\r\n                       e.printStackTrace();\r\n                   }\r\n                   startActivity(new Intent(this, Client_Homepage.class));\r\n               }\r\n               break;\r\n            case R.id.btnBack:\r\n                startActivity(new Intent(this, Register_Login_Page.class));\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to see if provided info is correct or not. If all conditions are met, then the Client can be registered\r\n     * E.g, first name can only contain letters\r\n     * @return\r\n     */\r\n    public boolean checkInfo() {\r\n\r\n        boolean found = false;\r\n        final String firstNameEntered = firstNameClient.getText().toString();\r\n        final String lastNameEntered = lastNameClient.getText().toString();\r\n        final String emailEntered = emailAddressClient.getText().toString();\r\n        final String passwordEntered = passwordClient.getText().toString();\r\n        final String addressNumEntered = addressNumClient.getText().toString();\r\n        final String addressNameEntered = addressNameClient.getText().toString();\r\n        final String cardNumEntered = (cardNumberClient.getText().toString()).replace(\" \",\"\");\r\n        final String monthYearEntered = monthYearClient.getText().toString();\r\n        final String cvvEntered = cvvClient.getText().toString();\r\n\r\n        /*\r\n        inputs must be at least of length 1\r\n         */\r\n        if(firstNameEntered.length() == 0 || lastNameEntered.length() == 0 || emailEntered.length() == 0||\r\n                passwordEntered.length() == 0 || addressNumEntered.length() == 0 ||\r\n                addressNameEntered.length() == 0 || cardNumEntered.length() == 0 || monthYearEntered.length() == 0 || cvvEntered.length() == 0){\r\n            Toast toast = Toast.makeText(getApplicationContext(), \"Input cannot be empty\",Toast.LENGTH_SHORT);\r\n            toast.show();\r\n            return false;\r\n        }\r\n\r\n        /*\r\n        first name cannot contain anything but letters\r\n         */\r\n        for (int i = 0; i < firstNameEntered.length(); i++) {\r\n            if (!(Character.isLetter(firstNameEntered.charAt(i)))) {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your first name must only contain letters\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /*\r\n        first name cannot contain anything but letters\r\n         */\r\n        for (int i = 0; i < lastNameEntered.length(); i++) {\r\n            if (!(Character.isLetter(lastNameEntered.charAt(i)))) {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your last name must only contain letters\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /*\r\n        email cannot have any spaces and must not contain more than one '@'\r\n         */\r\n        for (int i = 0; i < emailEntered.length(); i++) {\r\n            if ((emailEntered.charAt(i) == ' ')) {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your email must have no spaces\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n            if (emailEntered.charAt(i) == '@' ) {\r\n                found = true;\r\n                for (int j = i + 1; j < emailEntered.length(); j++) {\r\n                    if (emailEntered.charAt(j) == '@') {\r\n                        Toast toast = Toast.makeText(getApplicationContext(), \"Your email cannot have more than one '@'\",Toast.LENGTH_SHORT);\r\n                        toast.show();\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n        email must contain a '@'\r\n         */\r\n        if (found == false) {\r\n            Toast toast = Toast.makeText(getApplicationContext(), \"Your email must have a '@'\", Toast.LENGTH_SHORT);\r\n            toast.show();\r\n            return false;\r\n        }\r\n\r\n        /*\r\n        password must be at least 8 characters in length\r\n         */\r\n        if (passwordEntered.length() < 8) {\r\n            Toast toast = Toast.makeText(getApplicationContext(), \"Your password must be at least 8 characters\",Toast.LENGTH_SHORT);\r\n            toast.show();\r\n            return false;\r\n        }\r\n\r\n        /*\r\n        address number must only contain numbers\r\n         */\r\n        for (int i = 0;i < addressNumEntered.length(); i++){\r\n            if (!Character.isDigit(addressNumEntered.charAt(i))) {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your street number must only contain numbers\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /*\r\n        address name must only contain letters and spaces\r\n         */\r\n        for (int i = 0;i < addressNameEntered.length(); i++){\r\n            if (!Character.isLetter(addressNameEntered.charAt(i)) && addressNameEntered.charAt(i) != ' ') {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your street name must only contain letters and spaces\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /*\r\n        card number must only contain numbers\r\n         */\r\n        for (int i = 0; i < cardNumEntered.length(); i++) {\r\n            if (!Character.isDigit(cardNumEntered.charAt(i))) {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your card number must only contain numbers\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /*\r\n        card number must be 16 characters long\r\n         */\r\n        if (cardNumEntered.length() != 16){\r\n            Toast toast = Toast.makeText(getApplicationContext(), \"Your card number must be 16 digits\",Toast.LENGTH_SHORT);\r\n            toast.show();\r\n            return false;\r\n        }\r\n\r\n        /*\r\n        length of month/year must be 4 characters 'mm/yy'\r\n         */\r\n        if (monthYearEntered.length() != 4){\r\n            Toast toast = Toast.makeText(getApplicationContext(), \"Your credit card expiration date must be four digits\", Toast.LENGTH_SHORT);\r\n            toast.show();\r\n            return false;\r\n        }\r\n\r\n        /*\r\n        CVV pin must only contain numbers\r\n         */\r\n        for(int i = 0; i < cvvEntered.length(); i++){\r\n            if (!Character.isDigit(cvvEntered.charAt(i))){\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your cvv must only contain digits\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /*\r\n        the length of the CVV pin must be 3 characters\r\n         */\r\n        if (cvvEntered.length() != 3){\r\n            Toast toast = Toast.makeText(getApplicationContext(), \"Your cvv must be 3 digits\",Toast.LENGTH_SHORT);\r\n            toast.show();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Writes a new Client to the Database with the information input to the page\r\n     * @throws IOException\r\n     * @throws ClassNotFoundException\r\n     */\r\n    public void writeNewUser() throws IOException, ClassNotFoundException {\r\n        final String firstNameEntered = firstNameClient.getText().toString();\r\n        final String lastNameEntered = lastNameClient.getText().toString();\r\n        final String emailEntered = (emailAddressClient.getText().toString()).toLowerCase();\r\n        final String passwordEntered = passwordClient.getText().toString();\r\n        final String addressNumEntered = addressNumClient.getText().toString();\r\n        final String addressNameEntered = addressNameClient.getText().toString();\r\n        final String cardNumEntered = (cardNumberClient.getText().toString()).replace(\" \",\"\");\r\n        final String monthYearEntered = monthYearClient.getText().toString();\r\n        final String cvvEntered = cvvClient.getText().toString();\r\n\r\n        UUID randID = UUID.randomUUID();\r\n        String randIDString = randID.toString();\r\n        ArrayList<Integer> orderHistory = new ArrayList<>();\r\n        Client client = new Client(randIDString, firstNameEntered, lastNameEntered, emailEntered, passwordEntered, addressNumEntered + \" \" + addressNameEntered, cardNumEntered, monthYearEntered, cvvEntered,orderHistory);\r\n\r\n        DR.child(\"Users\").child(\"Clients\").child(randIDString).setValue(client);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/seg2105_project/Client_Registration.java b/app/src/main/java/com/example/seg2105_project/Client_Registration.java
--- a/app/src/main/java/com/example/seg2105_project/Client_Registration.java	(revision 3d228c49be2a6fc1285d2642b451ca46da63c693)
+++ b/app/src/main/java/com/example/seg2105_project/Client_Registration.java	(date 1666383286179)
@@ -1,5 +1,8 @@
 package com.example.seg2105_project;
 
+import static android.content.ContentValues.TAG;
+
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -8,13 +11,17 @@
 
 import android.content.Intent;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
 import android.widget.Toast;
 
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseError;
 import com.google.firebase.database.DatabaseReference;
 import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.ValueEventListener;
 
 public class Client_Registration extends AppCompatActivity implements View.OnClickListener {
 
@@ -29,6 +36,8 @@
     EditText cardNumberClient;
     EditText monthYearClient;
     EditText cvvClient;
+    boolean repeat = false;
+    boolean goneThrough = false;
 
     DatabaseReference DR;
 
@@ -51,7 +60,7 @@
 
 
 
-        DR = FirebaseDatabase.getInstance().getReference();
+        DR = FirebaseDatabase.getInstance().getReference("Users/Clients");
 
         btnRegisterClient.setOnClickListener(this);
         btnBack.setOnClickListener(this);
@@ -64,17 +73,9 @@
     public void onClick(View v) {
         switch(v.getId()) {
             case R.id.btnRegisterClient:
-               if (checkInfo() == true) {
+                checkEmail(emailAddressClient);
+                repeat = false;
 
-                   try {
-                       writeNewUser();
-                   } catch (ClassNotFoundException e) {
-                       e.printStackTrace();
-                   } catch (IOException e) {
-                       e.printStackTrace();
-                   }
-                   startActivity(new Intent(this, Client_Homepage.class));
-               }
                break;
             case R.id.btnBack:
                 startActivity(new Intent(this, Register_Login_Page.class));
@@ -245,6 +246,63 @@
         return true;
     }
 
+    private void checkEmail(EditText email){
+        final String emailEntered = email.getText().toString().toLowerCase();
+
+        DR.addValueEventListener(new ValueEventListener() {
+            @Override
+            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
+                for (DataSnapshot data : dataSnapshot.getChildren()) {
+                    //System.out.println(data);
+                    Client client = data.getValue(Client.class);
+                    if (emailEntered.equals(client.getEmail())) {
+                        repeatTrue();
+                        emailRepeated();
+
+
+                    }
+                }
+                System.out.println(repeat);
+
+                if (repeat == false){
+
+                    emailNotRepeated();
+                }
+            }
+            @Override
+            public void onCancelled(@NonNull DatabaseError databaseError) {
+                Log.e(TAG, "onCancelled: Something went wrong! Error:" + databaseError.getMessage());
+
+            }
+        });
+
+
+    }
+
+    private void repeatTrue(){
+        repeat = true;
+    }
+
+    private void emailRepeated(){
+        if(goneThrough == false) {
+            Toast.makeText(getApplicationContext(), "Email is already registered", Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    private void emailNotRepeated() {
+        goneThrough=true;
+        if (checkInfo() == true) {
+            try {
+                writeNewUser();
+            } catch (ClassNotFoundException e) {
+                e.printStackTrace();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+            startActivity(new Intent(this, Client_Homepage.class));
+        }
+    }
+
     /**
      * Writes a new Client to the Database with the information input to the page
      * @throws IOException
@@ -266,6 +324,6 @@
         ArrayList<Integer> orderHistory = new ArrayList<>();
         Client client = new Client(randIDString, firstNameEntered, lastNameEntered, emailEntered, passwordEntered, addressNumEntered + " " + addressNameEntered, cardNumEntered, monthYearEntered, cvvEntered,orderHistory);
 
-        DR.child("Users").child("Clients").child(randIDString).setValue(client);
+        DR.child(randIDString).setValue(client);
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/seg2105_project/Cook_Registration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.seg2105_project;\r\n\r\nimport static android.content.ContentValues.TAG;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.UUID;\r\n\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\npublic class Cook_Registration extends AppCompatActivity implements View.OnClickListener{\r\n\r\n    Button btnRegisterCook;\r\n    Button btnBackCookReg;\r\n    EditText firstNameCook;\r\n    EditText lastNameCook;\r\n    EditText emailAddressCook;\r\n    EditText passwordCook;\r\n    EditText addressNumCook;\r\n    EditText addressNameCook;\r\n    EditText descriptionCook;\r\n    boolean repeat = false;\r\n    boolean goneThrough = false;\r\n\r\n    DatabaseReference DR;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_cook_registration);\r\n\r\n        btnRegisterCook = (Button) findViewById(R.id.btnRegisterCook);\r\n        btnBackCookReg = (Button) findViewById(R.id.btnBackCookReg);\r\n        firstNameCook = (EditText) findViewById(R.id.firstNameCook);\r\n        lastNameCook = (EditText) findViewById(R.id.lastNameCook);\r\n        emailAddressCook = (EditText) findViewById(R.id.emailAddressCook);\r\n        passwordCook = (EditText) findViewById(R.id.passwordCook);\r\n        addressNumCook = (EditText) findViewById(R.id.addressNumCook);\r\n        addressNameCook = (EditText) findViewById(R.id.addressNameCook);\r\n        descriptionCook = (EditText) findViewById(R.id.descriptionCook);\r\n\r\n        DR = FirebaseDatabase.getInstance().getReference(\"Users/Cooks\");\r\n\r\n        btnRegisterCook.setOnClickListener( this);\r\n        btnBackCookReg.setOnClickListener( this);\r\n    }\r\n\r\n    public void onClick(View v) {\r\n        switch(v.getId()) {\r\n            case R.id.btnRegisterCook:\r\n\r\n                checkEmail(emailAddressCook);\r\n                repeat = false;\r\n\r\n                break;\r\n            case R.id.btnBackCookReg:\r\n                startActivity(new Intent(this, Register_Login_Page.class));\r\n                break;\r\n        }\r\n    }\r\n\r\n    public boolean checkInfo() {\r\n\r\n        boolean found = false;\r\n        final String firstNameEntered = firstNameCook.getText().toString();\r\n        final String lastNameEntered = lastNameCook.getText().toString();\r\n        final String emailEntered = (emailAddressCook.getText().toString()).toLowerCase();\r\n        final String addressNumEntered = addressNumCook.getText().toString();\r\n        final String addressNameEntered = addressNameCook.getText().toString();\r\n        final String passwordEntered = passwordCook.getText().toString();\r\n        final String descriptionEntered = descriptionCook.getText().toString();\r\n\r\n        if(firstNameEntered.length() == 0 || lastNameEntered.length() == 0 || emailEntered.length() == 0||\r\n                addressNumEntered.length() == 0 || addressNameEntered.length() == 0 || passwordEntered.length() == 0 || descriptionEntered.length() == 0){\r\n            Toast toast = Toast.makeText(getApplicationContext(), \"Input cannot be empty\",Toast.LENGTH_SHORT);\r\n            toast.show();\r\n            return false;\r\n        }\r\n        for (int i = 0; i < firstNameEntered.length(); i++) {\r\n            if (!(Character.isLetter(firstNameEntered.charAt(i)))) {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your first name must only contain letters\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < lastNameEntered.length(); i++) {\r\n            if (!(Character.isLetter(lastNameEntered.charAt(i)))) {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your last name must only contain letters\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for (int i = 0;i < addressNumEntered.length(); i++){\r\n            if (!Character.isDigit(addressNumEntered.charAt(i))) {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your street number must only contain numbers\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for (int i = 0;i < addressNameEntered.length(); i++){\r\n            if (!Character.isLetter(addressNameEntered.charAt(i)) && addressNameEntered.charAt(i) != ' ') {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your street name must only contain letters and spaces\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < emailEntered.length(); i++) {\r\n            if ((emailEntered.charAt(i) == ' ')) {\r\n                Toast toast = Toast.makeText(getApplicationContext(), \"Your email must have no spaces\",Toast.LENGTH_SHORT);\r\n                toast.show();\r\n                return false;\r\n            }\r\n            if (emailEntered.charAt(i) == '@' ) {\r\n                found = true;\r\n                for (int j = i + 1; j < emailEntered.length(); j++) {\r\n                    if (emailEntered.charAt(j) == '@') {\r\n                        Toast toast = Toast.makeText(getApplicationContext(), \"Your email cannot have more than one '@'\",Toast.LENGTH_SHORT);\r\n                        toast.show();\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (found == false) {\r\n            Toast toast = Toast.makeText(getApplicationContext(), \"Your email must have a '@'\", Toast.LENGTH_SHORT);\r\n            toast.show();\r\n            return false;\r\n        }\r\n        if (passwordEntered.length() < 8) {\r\n            Toast toast = Toast.makeText(getApplicationContext(), \"Your password must be at least 8 characters\",Toast.LENGTH_SHORT);\r\n            toast.show();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void checkEmail(EditText email){\r\n        final String emailEntered = email.getText().toString().toLowerCase();\r\n\r\n        DR.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                for (DataSnapshot data : dataSnapshot.getChildren()) {\r\n                    //System.out.println(data);\r\n                    Cook cook = data.getValue(Cook.class);\r\n                    if (emailEntered.equals(cook.getEmail())) {\r\n                        repeatTrue();\r\n                        emailRepeated();\r\n                        System.out.println(\"2\");\r\n                        System.out.println(repeat);\r\n\r\n\r\n                    }\r\n                }\r\n                System.out.println(\"3\");\r\n                System.out.println(repeat);\r\n\r\n                if (repeat == false){\r\n                    System.out.println(\"4\");\r\n\r\n                    emailNotRepeated();\r\n                }\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                Log.e(TAG, \"onCancelled: Something went wrong! Error:\" + databaseError.getMessage());\r\n\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n    private void repeatTrue(){\r\n        repeat = true;\r\n    }\r\n\r\n    private void emailRepeated(){\r\n        if(goneThrough == false) {\r\n            Toast.makeText(getApplicationContext(), \"Email is already registered\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    private void emailNotRepeated() {\r\n        System.out.println(\"5\");\r\n        System.out.println(\"2\");\r\n        goneThrough=true;\r\n        if (checkInfo() == true) {\r\n            try {\r\n                writeNewUser();\r\n            } catch (ClassNotFoundException e) {\r\n                e.printStackTrace();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            startActivity(new Intent(this, Cook_Homepage.class));\r\n        }\r\n    }\r\n\r\n    public void writeNewUser() throws IOException, ClassNotFoundException {\r\n        final String firstNameEntered = firstNameCook.getText().toString();\r\n        final String lastNameEntered = lastNameCook.getText().toString();\r\n        final String emailEntered = (emailAddressCook.getText().toString()).toLowerCase();\r\n        final String passwordEntered = passwordCook.getText().toString();\r\n        final String addressNumEntered = addressNumCook.getText().toString();\r\n        final String addressNameEntered = addressNameCook.getText().toString();\r\n        final String descriptionEntered = descriptionCook.getText().toString();\r\n\r\n        UUID randID = UUID.randomUUID();\r\n        String randIDString = randID.toString();\r\n        ArrayList<Integer> menu = new ArrayList<>();\r\n\r\n        Cook cook = new Cook(randIDString, firstNameEntered, lastNameEntered, emailEntered, passwordEntered, addressNumEntered + \" \" + addressNameEntered, descriptionEntered);\r\n\r\n        DR.child(randIDString).setValue(cook);\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/seg2105_project/Cook_Registration.java b/app/src/main/java/com/example/seg2105_project/Cook_Registration.java
--- a/app/src/main/java/com/example/seg2105_project/Cook_Registration.java	(revision 3d228c49be2a6fc1285d2642b451ca46da63c693)
+++ b/app/src/main/java/com/example/seg2105_project/Cook_Registration.java	(date 1666383007375)
@@ -165,17 +165,13 @@
                     if (emailEntered.equals(cook.getEmail())) {
                         repeatTrue();
                         emailRepeated();
-                        System.out.println("2");
-                        System.out.println(repeat);
-
-
-                    }
-                }
-                System.out.println("3");
+
+
+                    }
+                }
                 System.out.println(repeat);
 
                 if (repeat == false){
-                    System.out.println("4");
 
                     emailNotRepeated();
                 }
@@ -200,8 +196,6 @@
     }
 
     private void emailNotRepeated() {
-        System.out.println("5");
-        System.out.println("2");
         goneThrough=true;
         if (checkInfo() == true) {
             try {
